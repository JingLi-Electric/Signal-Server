name: Docker Build

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * 0'  # 每周日凌晨2点构建

jobs:
  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false  # Skip submodules to avoid private spam-filter dependency

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM openjdk:21-jdk-slim
        
        # 安装必要的依赖
        RUN apt-get update && apt-get install -y \
            protobuf-compiler \
            maven \
            && rm -rf /var/lib/apt/lists/*
        
        # 设置工作目录
        WORKDIR /app
        
        # 复制源代码
        COPY . .
        
        # 构建应用
        RUN mvn clean package -DskipTests
        
        # 创建运行时镜像
        FROM openjdk:21-jre-slim
        
        # 创建用户
        RUN groupadd -r signal && useradd -r -g signal signal
        
        # 设置工作目录
        WORKDIR /app
        
        # 复制构建产物
        COPY --from=0 /app/service/target/service-*.jar signal-server.jar
        COPY --from=0 /app/websocket-resources/target/websocket-resources-*.jar websocket-resources.jar
        COPY --from=0 /app/service/config/sample.yml config.yml
        
        # 创建启动脚本
        RUN echo '#!/bin/bash\njava -jar signal-server.jar server config.yml' > start.sh && \
            chmod +x start.sh && \
            chown -R signal:signal /app
        
        # 切换用户
        USER signal
        
        # 暴露端口
        EXPOSE 8080 8081
        
        # 健康检查
        HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
          CMD curl -f http://localhost:8081/health || exit 1
        
        # 启动命令
        CMD ["./start.sh"]
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/signal-server:latest
          ghcr.io/${{ github.repository_owner }}/signal-server:build-${{ github.run_number }}
          ghcr.io/${{ github.repository_owner }}/signal-server:carljoy-static-verification
        labels: |
          org.opencontainers.image.title=Signal Server (CarlJoy Modified)
          org.opencontainers.image.description=Signal Server with static verification codes
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}

    - name: Create docker-compose file
      run: |
        mkdir -p docker-artifacts
        cat > docker-artifacts/docker-compose.yml << 'EOF'
        version: '3.8'
        
        services:
          signal-server:
            image: ghcr.io/${{ github.repository_owner }}/signal-server:latest
            container_name: signal-server
            ports:
              - "8080:8080"
              - "8081:8081"
            volumes:
              - ./config.yml:/app/config.yml:ro
              - signal-data:/app/data
            environment:
              - JAVA_OPTS=-Xmx1g -Xms512m
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 60s
        
        volumes:
          signal-data:
        EOF
        
        # 创建示例配置
        cp service/config/sample.yml docker-artifacts/config.yml
        
        # 创建部署说明
        cat > docker-artifacts/README.md << 'EOF'
        # Signal Server Docker 部署
        
        ## CarlJoy 静态验证码版本
        
        ### 快速启动：
        
        1. **修改配置文件**
           ```bash
           # 编辑 config.yml，配置数据库连接等
           vim config.yml
           ```
        
        2. **启动服务**
           ```bash
           docker-compose up -d
           ```
        
        3. **查看日志**
           ```bash
           docker-compose logs -f signal-server
           ```
        
        4. **停止服务**
           ```bash
           docker-compose down
           ```
        
        ### 特性说明：
        - 使用静态验证码替代短信验证
        - 手机号作为用户名，验证码作为密码
        - 自动创建新用户账户
        
        ### 端口说明：
        - 8080: 主服务端口
        - 8081: 管理端口（健康检查）
        
        ### 数据持久化：
        应用数据存储在 `signal-data` 卷中
        EOF

    - name: Upload Docker artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docker-deployment-${{ github.run_number }}
        path: docker-artifacts/
        retention-days: 30

    - name: Create deployment summary
      run: |
        echo "🐳 **Docker 镜像构建完成！**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📦 **镜像地址：**" >> $GITHUB_STEP_SUMMARY
        echo "- \`ghcr.io/${{ github.repository_owner }}/signal-server:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`ghcr.io/${{ github.repository_owner }}/signal-server:build-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`ghcr.io/${{ github.repository_owner }}/signal-server:carljoy-static-verification\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **快速使用：**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# 下载部署文件" >> $GITHUB_STEP_SUMMARY
        echo "# 从 Actions 页面下载 docker-deployment-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# 启动服务" >> $GITHUB_STEP_SUMMARY
        echo "docker-compose up -d" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY 